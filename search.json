[{"path":[]},{"path":"https://jesse-smith.github.io/futuremice/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://jesse-smith.github.io/futuremice/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://jesse-smith.github.io/futuremice/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://jesse-smith.github.io/futuremice/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://jesse-smith.github.io/futuremice/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@rstudio.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://jesse-smith.github.io/futuremice/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://jesse-smith.github.io/futuremice/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://jesse-smith.github.io/futuremice/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://jesse-smith.github.io/futuremice/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://jesse-smith.github.io/futuremice/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://jesse-smith.github.io/futuremice/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://jesse-smith.github.io/futuremice/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to futuremice","title":"Contributing to futuremice","text":"outlines propose change futuremice. detailed info contributing package, please see development contributing guide. Note process based tidyverse contributing guide, {fledge} used keep track changelog (NEWS.md).","code":""},{"path":"https://jesse-smith.github.io/futuremice/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to futuremice","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://jesse-smith.github.io/futuremice/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to futuremice","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://jesse-smith.github.io/futuremice/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to futuremice","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"jesse-smith/futuremice\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes commit git. important user-facing changes, add hyphen (-) asterisk (*) beginning important commit messages commit messages ’ll recorded changelog eventually! may also wish include message PR’s merge/squash commit (see ). Exclude housekeeping parts message typing line ---. example: Create PR running usethis::pr_push() following prompts browser. title PR briefly describe change. user-facing changes haven’t already marked documentation changelog, prefix title hyphen (-) asterisk (*) (see ). body PR contain Fixes #issue-number.","code":"- Add support for bla databases. - Add support for bla databases.  ---  Also tweak the CI workflow accordingly :sweat_smile:"},{"path":"https://jesse-smith.github.io/futuremice/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to futuremice","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://jesse-smith.github.io/futuremice/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to futuremice","text":"Please note futuremice project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jesse-smith.github.io/futuremice/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://jesse-smith.github.io/futuremice/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with futuremice","title":"Getting help with futuremice","text":"Thanks using futuremice! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://jesse-smith.github.io/futuremice/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with futuremice","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://jesse-smith.github.io/futuremice/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with futuremice","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://jesse-smith.github.io/futuremice/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with futuremice","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://jesse-smith.github.io/futuremice/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jesse Smith. Author, maintainer.","code":""},{"path":"https://jesse-smith.github.io/futuremice/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith J (2022). futuremice: Future MICE. https://github.com/jesse-smith/futuremice, https://jesse-smith.github.io/futuremice/.","code":"@Manual{,   title = {futuremice: A Future for MICE},   author = {Jesse Smith},   year = {2022},   note = {https://github.com/jesse-smith/futuremice, https://jesse-smith.github.io/futuremice/}, }"},{"path":"https://jesse-smith.github.io/futuremice/index.html","id":"futuremice","dir":"","previous_headings":"","what":"A Future for MICE","title":"A Future for MICE","text":"futuremice parallelizes main functionality mice package using future furrr. enables use progress bar updates, well early stopping method save time spent unneeded iteration manual convergence checks (quality checks - still assess results ).","code":""},{"path":"https://jesse-smith.github.io/futuremice/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Future for MICE","text":"can install development version futuremice like :","code":"# You will need Rtools to install packages from Github on Windows # `devtools` with throw an informative error if Rtools is not found if (!\"devtools\" %in% installed.packages()) install.packages(\"devtools\") devtools::install_github(\"jesse-smith/futuremice\")"},{"path":"https://jesse-smith.github.io/futuremice/index.html","id":"minimal-example","dir":"","previous_headings":"","what":"Minimal Example","title":"A Future for MICE","text":"Let’s run example mice package documentation, parallel. futuremice uses future package run imputations parallel. default, future run \"sequential\" plan, different (little less efficient) calling mice::mice(). take advantage multiple CPUs, can use \"multisession\" plan (see vignette future package details different plans). future_mice() also provides progress bar real-time convergence diagnostics using progressr; however, default progress bar show messages, ’ll use progress handler see diagnostics. Now, let’s impute missing data: Note future_mice() often run longer mice::mice()’s default 5 imputations convergence confidently achieved. Also note get progress bar wrap call with_progress(); feature progressr package. can use resulting mids object just like result call mice::mice(). Let’s inspect quality imputations:  general, like imputations plausible, .e., values observed missing. Now let’s fit model imputed data set pool results: complete-data model fit imputed data set, results combined arrive estimates properly account missing data. can also compare two mids objects using compare_mids(): show us differences occur two objects (). ’ll ignore attributes depend RNG state evaluating imputations parallel requires different kind random number generation evaluating sequentially, first iteration mice::mice().","code":"# Load {futuremice} library(futuremice)  # Use a local seed withr::local_seed(1L)  # Evaluate futures in parallel - max of two workers to avoid hogging resources future::plan(\"multisession\", workers = pmin(2L, future::availableCores()))  # Use {progress} package for progress bar - shows diagnostics in real time progressr::handlers(\"progress\") # Impute the missing values using defaults # Use `progressr::with_progress()` to show the progress bar mids <- progressr::with_progress(future_mice(mice::nhanes)) #> Converged in 58 iterations #> R-hat: 1.036/1.022/1.021/1.033  # Or start with `mice::mice()` and finish with `future_mids()` mids2 <- mice::mice(mice::nhanes, maxit = 1L, printFlag = FALSE) mids2 <- progressr::with_progress(future_mids(mids2, maxit = 100L)) #> Converged in 68 iterations #> R-hat: 1.035/1.021/1.025/1.017/1.023  # View the resulting `mids` (*m*ultiply *i*mputed *d*ata *s*et) object mids #> Class: mids #> Number of multiple imputations:  5  #> Imputation methods: #>   age   bmi   hyp   chl  #>    \"\" \"pmm\" \"pmm\" \"pmm\"  #> PredictorMatrix: #>     age bmi hyp chl #> age   0   1   1   1 #> bmi   1   0   1   1 #> hyp   1   1   0   1 #> chl   1   1   1   0  # List the actual imputations for BMI mids$imp$bmi #>       1    2    3    4    5 #> 1  30.1 30.1 30.1 30.1 30.1 #> 3  30.1 30.1 30.1 30.1 30.1 #> 4  28.7 28.7 28.7 28.7 28.7 #> 6  21.7 21.7 21.7 21.7 21.7 #> 10 20.4 20.4 20.4 20.4 20.4 #> 11 27.2 27.2 27.2 27.2 27.2 #> 12 27.4 27.4 27.4 27.4 27.4 #> 16 30.1 30.1 30.1 30.1 30.1 #> 21 27.2 27.2 27.2 27.2 27.2 # Inspect quality of imputations mice::stripplot(mids, chl, pch = 19, xlab = \"Imputation number\") # Fit complete-data model fit <- with(mids, lm(chl ~ age + bmi))  # Pool and summarize the results summary(mice::pool(fit)) #>          term   estimate std.error  statistic       df     p.value #> 1 (Intercept) -21.865304 56.857847 -0.3845609 20.23797 0.704574068 #> 2         age  27.399468  8.579227  3.1936989 20.23797 0.004512915 #> 3         bmi   6.237545  1.812132  3.4421031 20.23797 0.002544689 compare_mids(mids, mids2, ignore_rng = TRUE) #> Elements of `x` not in `y` #> ✔ None #> Elements of `y` not in `x` #> ✔ None #> Shared elements with differences: #> ✖ iteration #> ✖ chainMean #> ✖ chainVar #> Shared elements without differences: #> ✔ data #> ✔ imp #> ✔ m #> ✔ where #> ✔ blocks #> ✔ nmis #> ✔ method #> ✔ predictorMatrix #> ✔ visitSequence #> ✔ formulas #> ✔ post #> ✔ blots #> ✔ ignore #> Shared elements ignored: #> ℹ call #> ℹ seed #> ℹ lastSeedValue #> ℹ loggedEvents #> ℹ version #> ℹ date"},{"path":"https://jesse-smith.github.io/futuremice/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"A Future for MICE","text":"Please note futuremice project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/compare_mids.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Two mids Objects and Show Summary — compare_mids","title":"Compare Two mids Objects and Show Summary — compare_mids","text":"compare_mids() combination .equal() identical() mids objects. Like .equal(), displays summary element-wise differences (also explicitly lists elements equal). However, rather outputting differences character vector found, always returns either TRUE FALSE. quiet = FALSE, return value invisible.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/compare_mids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Two mids Objects and Show Summary — compare_mids","text":"","code":"compare_mids(   x,   y,   show_msg = TRUE,   show_rtn = !show_msg,   ignore_rng = NULL,   ignore_call = TRUE,   ignore_version = TRUE,   ignore_date = TRUE )"},{"path":"https://jesse-smith.github.io/futuremice/reference/compare_mids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Two mids Objects and Show Summary — compare_mids","text":"x, y mids objects compare, created mice::mice(), future_mice(), mice::mice.mids(), future_mids(), etc. show_msg message displaying element-wise comparisons shown? show_rtn return value visible? default opposite show_msg, either message return value shown, . ignore_rng elements components elements affected RNG state ignored? See Details information. default ignore different package namespaces detected mids$call, otherwise check. ignore_call, ignore_version, ignore_date corresponding mids element (mids$call, mids$version, mids$date, respectively) ignored equality comparison? elements usually impact results elements identical can thus usually safely ignored.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/compare_mids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Two mids Objects and Show Summary — compare_mids","text":"TRUE FALSE","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/compare_mids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare Two mids Objects and Show Summary — compare_mids","text":"Proper random number generation requires different methods performing operations parallel; thus, generally possible exactly replicate mids objects produced sequentially imputing chains parallel. particular, imputed values differ, well functions values (chainMean, chainVar, loggedEvents). function takes stance imputations performed functions package consistent, functions different packages may handle random number generation differently. Thus, compare_mids() can detect two functions came package, compare full RNG-related elements default. Otherwise, check attributes independent random number generation , allow differences attributes data dependent RNG state. RNG-related attributes ignored, RNG state also ignored, differences seed lastSeedValue also allowed case.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/compare_mids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Two mids Objects and Show Summary — compare_mids","text":"","code":"m_mids <- mice::mice(mice::nhanes, m = 1L, maxit = 1L) #>  #>  iter imp variable #>   1   1  bmi  hyp  chl f_mids <- future_mice(mice::nhanes, m = 1L, maxit = 1L) #> Warning: Sampling did not converge in 1 iteration #> R-hat: NA compare_mids(m_mids, f_mids) #> Elements of `x` not in `y` #> ✔ None #> Elements of `y` not in `x` #> ✔ None #> Shared elements with differences: #> ✔ None #> Shared elements without differences: #> ✔ data #> ✔ imp #> ✔ m #> ✔ where #> ✔ blocks #> ✔ nmis #> ✔ method #> ✔ predictorMatrix #> ✔ visitSequence #> ✔ formulas #> ✔ post #> ✔ blots #> ✔ ignore #> ✔ iteration #> ✔ chainMean #> ✔ chainVar #> Shared elements ignored: #> ℹ call #> ℹ seed #> ℹ lastSeedValue #> ℹ loggedEvents #> ℹ version #> ℹ date"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_assert.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Assertions on Data Types and Arguments — fm_assert","title":"Make Assertions on Data Types and Arguments — fm_assert","text":"fm_assert_mids() checks mids object fm_assert_progressor() checks progressor function NULL fm_assert_bool() checks non-missing, scalar logical fm_assert_count() checks non-missing, finite, scalar integer-ish value >= 0 converts input integer fm_assert_seed() checks finite, scalar integer-ish value, NA, NULL, converts non-NULL input integer fm_assert_num() checks non-missing, scalar, finite numeric converts input double fm_assert_vec_int() checks non-missing, finite integer-ish values converts input integer fm_assert_vec_num() checks non-missnig, finite values converts input double","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_assert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Assertions on Data Types and Arguments — fm_assert","text":"","code":"fm_assert_mids(x, arg_nm = rlang::caller_arg(x))  fm_assert_progressor(x, arg_nm = rlang::caller_arg(x))  fm_assert_bool(x, arg_nm = rlang::caller_arg(x))  fm_assert_count(x, zero_ok = TRUE, arg_nm = rlang::caller_arg(x))  fm_assert_seed(x, arg_nm = rlang::caller_arg(x))  fm_assert_num(x, arg_nm = rlang::caller_arg(x))  fm_assert_vec_int(x, arg_nm = rlang::caller_arg(x))  fm_assert_vec_num(x, na_ok = FALSE, arg_nm = rlang::caller_arg(x))"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_assert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Assertions on Data Types and Arguments — fm_assert","text":"x object check arg_nm name object check; can usually inferred caller environment automatically zero_ok zero included counting numbers raise error? na_ok NA, NaN, Inf values considered valid?","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_assert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Assertions on Data Types and Arguments — fm_assert","text":"successful, x, invisibly; errors unsuccessful. x may converted strictly match required data type.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_call_ns_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Namespace of Function Call — fm_call_ns_name","title":"Detect Namespace of Function Call — fm_call_ns_name","text":"Tries detect namespace call automatically. first try extract namespace using rlang::call_ns(); fails, use supplied env (rlang::caller_env(), default) attempt extract namespace call's function. latter method similar rlang::call_fn(), now deprecated due inconsistent results. yet clear whether works well enough retain behavior practice.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_call_ns_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Namespace of Function Call — fm_call_ns_name","text":"","code":"fm_call_ns_name(call, env = rlang::caller_env(), error = TRUE)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_call_ns_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Namespace of Function Call — fm_call_ns_name","text":"call call object extract namespace env environment use lookup function definition call call explicitly namespaced error function throw error call call object?","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_call_ns_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Namespace of Function Call — fm_call_ns_name","text":"name associated namespace, detected; , returns NULL","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_caller_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct List of Arguments from Matched Caller Function — fm_caller_args","title":"Construct List of Arguments from Matched Caller Function — fm_caller_args","text":"Construct List Arguments Matched Caller Function","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_caller_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct List of Arguments from Matched Caller Function — fm_caller_args","text":"","code":"fm_caller_args(   n = 1,   ...,   defaults = FALSE,   dots_env = NULL,   dots_expand = TRUE )"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_caller_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct List of Arguments from Matched Caller Function — fm_caller_args","text":"n number callers go back. ... dots must empty. defaults Whether match missing arguments defaults. dots_env execution environment find dots. supplied dots exist environment, call includes ..., forwarded dots matched numbered dots (e.g. ..1, ..2, etc). default set empty environment means ... expands nothing. dots_expand FALSE, arguments passed ... spliced call. Instead, gathered pairlist assigned argument named .... Gathering dots arguments useful need separate named arguments. Note resulting call meant evaluated since R support passing dots named argument, even named \"...\".","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_caller_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct List of Arguments from Matched Caller Function — fm_caller_args","text":"named list arguments.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_exit_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Throw Messages/Warnings at End of future_mice() Execution — fm_exit_msg","title":"Throw Messages/Warnings at End of future_mice() Execution — fm_exit_msg","text":"Throw Messages/Warnings End future_mice() Execution","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_exit_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Throw Messages/Warnings at End of future_mice() Execution — fm_exit_msg","text":"","code":"fm_exit_msg(i, rhat, minit, rhat_msg)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_exit_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Throw Messages/Warnings at End of future_mice() Execution — fm_exit_msg","text":"Integer(ish) representing iteration count rhat_msg Contents message displaying R-hat values last rhat_it iterations rhat_lt Logical vector R-hat comparisons. length(rhat_lt) must less equal rhat_it. rhat_it Integer(ish) number iterations used R-hat comparison","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_exit_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Throw Messages/Warnings at End of future_mice() Execution — fm_exit_msg","text":"NULL, invisibly","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_furrr_opts.html","id":null,"dir":"Reference","previous_headings":"","what":"Create furrr_options() List from Parallelization Parameters — fm_furrr_opts","title":"Create furrr_options() List from Parallelization Parameters — fm_furrr_opts","text":"Create furrr_options() List Parallelization Parameters","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_furrr_opts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create furrr_options() List from Parallelization Parameters — fm_furrr_opts","text":"","code":"fm_furrr_opts(parallel_params)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_furrr_opts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create furrr_options() List from Parallelization Parameters — fm_furrr_opts","text":"parallel_params List parameters parallelization calculated fm_parallel_params()","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_furrr_opts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create furrr_options() List from Parallelization Parameters — fm_furrr_opts","text":"list options furrr functions, created furrr::furrr_options()","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_gcd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Greatest Common Divisor of Positive Integers — fm_gcd","title":"Calculate Greatest Common Divisor of Positive Integers — fm_gcd","text":"Calculate Greatest Common Divisor Positive Integers","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_gcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Greatest Common Divisor of Positive Integers — fm_gcd","text":"","code":"fm_gcd(...)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_gcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Greatest Common Divisor of Positive Integers — fm_gcd","text":"... Numeric vectors containing integer set GCD calculation","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_gcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Greatest Common Divisor of Positive Integers — fm_gcd","text":"positive scalar integer containing GCD inputs","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_ibind_logged_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function for Setting mids$loggedEvents — fm_ibind_logged_events","title":"Helper Function for Setting mids$loggedEvents — fm_ibind_logged_events","text":"Helper Function Setting mids$loggedEvents","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_ibind_logged_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function for Setting mids$loggedEvents — fm_ibind_logged_events","text":"","code":"fm_ibind_logged_events(mids, mids_list)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_ibind_logged_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function for Setting mids$loggedEvents — fm_ibind_logged_events","text":"mids mids object update mids_list list mids objects loggedEvents extract combine","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_ibind_logged_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function for Setting mids$loggedEvents — fm_ibind_logged_events","text":"mids loggedEvents mids_list","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_is_scalar_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Is Object a Scalar Integer-ish Value — fm_is_scalar_int","title":"Is Object a Scalar Integer-ish Value — fm_is_scalar_int","text":"Always returns TRUE FALSE - never errors","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_is_scalar_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is Object a Scalar Integer-ish Value — fm_is_scalar_int","text":"","code":"fm_is_scalar_int(x)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_is_scalar_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is Object a Scalar Integer-ish Value — fm_is_scalar_int","text":"x Object test","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_is_scalar_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is Object a Scalar Integer-ish Value — fm_is_scalar_int","text":"TRUE FALSE","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_isplit_logged_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset and Insert mids$loggedEvents Element — fm_isplit_logged_events","title":"Subset and Insert mids$loggedEvents Element — fm_isplit_logged_events","text":"Subset Insert mids$loggedEvents Element","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_isplit_logged_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset and Insert mids$loggedEvents Element — fm_isplit_logged_events","text":"","code":"fm_isplit_logged_events(mids, logged_events, im)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_isplit_logged_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset and Insert mids$loggedEvents Element — fm_isplit_logged_events","text":"mids mids object insert new loggedEvents logged_events data.frame containing event logs mice::mice() run im imputations associated logs inserted","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_isplit_logged_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset and Insert mids$loggedEvents Element — fm_isplit_logged_events","text":"mids new loggedEvents element","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mice.html","id":null,"dir":"Reference","previous_headings":"","what":"{furrr}-Friendly mice::mice() w/ Progress Updates — fm_mice","title":"{furrr}-Friendly mice::mice() w/ Progress Updates — fm_mice","text":"{furrr}-Friendly mice::mice() w/ Progress Updates","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"{furrr}-Friendly mice::mice() w/ Progress Updates — fm_mice","text":"","code":"fm_mice(.m, mice_args, progressor)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"{furrr}-Friendly mice::mice() w/ Progress Updates — fm_mice","text":".m Sink allows iteration w/ {purrr}-style map() functions. Unused. progressor progressor() {progressr} ... Arguments passed mice::mice. seed ignored.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"{furrr}-Friendly mice::mice() w/ Progress Updates — fm_mice","text":"mids object (multiply imputed data set)","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mice_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Arguments in future_mice() — fm_mice_args","title":"Combine Arguments in future_mice() — fm_mice_args","text":"Helper function combine parse named arguments + dots future_mice()","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mice_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Arguments in future_mice() — fm_mice_args","text":"","code":"fm_mice_args(m, .args = fm_caller_args(n = 2L))"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mice_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Arguments in future_mice() — fm_mice_args","text":"m number chains per mice::mice() call .args named list arguments future_mice() call","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mice_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Arguments in future_mice() — fm_mice_args","text":"list containing arguments pass mice::mice()","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mice_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Create {mice}-Friendly seed — fm_mice_seed","title":"Create {mice}-Friendly seed — fm_mice_seed","text":"Create {mice}-Friendly seed","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mice_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create {mice}-Friendly seed — fm_mice_seed","text":"","code":"fm_mice_seed(seed)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mice_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create {mice}-Friendly seed — fm_mice_seed","text":"seed scalar integer, NA, NULL","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mice_seed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create {mice}-Friendly seed — fm_mice_seed","text":"Converts NULL NA, otherwise returns input errors","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mids.html","id":null,"dir":"Reference","previous_headings":"","what":"{furrr}-Friendly mice::mice.mids() w/ Progress Updates — fm_mids","title":"{furrr}-Friendly mice::mice.mids() w/ Progress Updates — fm_mids","text":"{furrr}-Friendly mice::mice.mids() w/ Progress Updates","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"{furrr}-Friendly mice::mice.mids() w/ Progress Updates — fm_mids","text":"","code":"fm_mids(mids, mice_args, progressor, newdata = NULL)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"{furrr}-Friendly mice::mice.mids() w/ Progress Updates — fm_mids","text":"mids object class mids, typically produced previous call fm_mice() progressor progressor() {progressr} newdata optional data.frame multiple imputations generated according model obj maxit number additional Gibbs sampling iterations","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_mids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"{furrr}-Friendly mice::mice.mids() w/ Progress Updates — fm_mids","text":"mids object (multiply imputed data set) additional iterations","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_parallel_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Parameters for Parallelization of Chains — fm_parallel_params","title":"Calculate Parameters for Parallelization of Chains — fm_parallel_params","text":"Calculates number chains per call mice::mice() mice::mice.mids(), average number calls chunked future, number futures needed satisfy given arguments.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_parallel_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Parameters for Parallelization of Chains — fm_parallel_params","text":"","code":"fm_parallel_params(m, chunk_size, maxit, seed)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_parallel_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Parameters for Parallelization of Chains — fm_parallel_params","text":"m total number chains (imputations) chunk_size average number chains per future","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_parallel_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Parameters for Parallelization of Chains — fm_parallel_params","text":"list containing parameters n_chains (chains per call), n_calls (number calls mice()), chunk_size (number calls per future), maxit (maximum number iterations), seed (RNG seed)","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_prep_diagnostic_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Chain Means and Variances from a mids object — fm_prep_diagnostic_params","title":"Extract Chain Means and Variances from a mids object — fm_prep_diagnostic_params","text":"Extract Chain Means Variances mids object","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_prep_diagnostic_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Chain Means and Variances from a mids object — fm_prep_diagnostic_params","text":"","code":"fm_prep_diagnostic_params(mids)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_prep_diagnostic_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Chain Means and Variances from a mids object — fm_prep_diagnostic_params","text":"mids mids object created mice::mice()","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_prep_diagnostic_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Chain Means and Variances from a mids object — fm_prep_diagnostic_params","text":"list 2D matrices (one imputed variable) rows corresponding iterations columns corresponding chains","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_rhat_converged.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Convergence of mids Object — fm_rhat_converged","title":"Check Convergence of mids Object — fm_rhat_converged","text":"Check Convergence mids Object","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_rhat_converged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Convergence of mids Object — fm_rhat_converged","text":"","code":"fm_rhat_converged(mids, n = 1L, max = 1.05)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_rhat_converged.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Convergence of mids Object — fm_rhat_converged","text":"mids mids object imputations check n number iterations use checking. Must > 0. max upper bound R-hat convergence","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_rhat_max_.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick Max R-hat Calculation — fm_rhat_max_","title":"Quick Max R-hat Calculation — fm_rhat_max_","text":"Calculates largest R-hat statistic across variables chain statistics recent iteration","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_rhat_max_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick Max R-hat Calculation — fm_rhat_max_","text":"","code":"fm_rhat_max_(params, iters = NULL)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_rhat_max_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick Max R-hat Calculation — fm_rhat_max_","text":"iters integer vector iterations use R-hat R-hat calculation","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_rhat_max_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick Max R-hat Calculation — fm_rhat_max_","text":"scalar double containing maximum R-hat statistic","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_rng_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Create {rngtools}-Friendly seed — fm_rng_seed","title":"Create {rngtools}-Friendly seed — fm_rng_seed","text":"Create {rngtools}-Friendly seed","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_rng_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create {rngtools}-Friendly seed — fm_rng_seed","text":"","code":"fm_rng_seed(seed)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_rng_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create {rngtools}-Friendly seed — fm_rng_seed","text":"seed scalar integer, NA, NULL","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_rng_seed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create {rngtools}-Friendly seed — fm_rng_seed","text":"Converts NA NULL, otherwise returns input errors","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_set_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function for Setting mids$call — fm_set_call","title":"Helper Function for Setting mids$call — fm_set_call","text":"Helper Function Setting mids$call","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_set_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function for Setting mids$call — fm_set_call","text":"","code":"fm_set_call(mids, call)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_set_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function for Setting mids$call — fm_set_call","text":"mids mids object update call call object use mids$call standardization. Can NULL, case mids returned unaltered.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_set_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function for Setting mids$call — fm_set_call","text":"mids object updated call (call NULL). Note call arguments m, maxit, seed, values updated reflect corresponding attribute mids.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_set_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function for Setting Row and Column Names — fm_set_names","title":"Helper Function for Setting Row and Column Names — fm_set_names","text":"Helper Function Setting Row Column Names","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_set_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function for Setting Row and Column Names — fm_set_names","text":"","code":"fm_set_colnames(x, names)  fm_set_rownames(x, names)"},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_set_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function for Setting Row and Column Names — fm_set_names","text":"x object set names . Must least 2 dimensions use fm_set_colnames(). names character vector row column names","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/fm_set_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function for Setting Row and Column Names — fm_set_names","text":"x, (re-)named rows columns","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/future_mice.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallelize `mice::mice()`  Using {future} — future_mice","title":"Parallelize `mice::mice()`  Using {future} — future_mice","text":"future_mice() parallelizes chains Multivariate Imputation using Chained Equations (MICE) using {furrr} package create futures chains. Chains also assessed convergence using R-hat (potential scale reduction factor) statistic; largest R-hat less rhat_max minit iterations, function returns early (without completing maxit iterations). can save significant amount computation manual convergence checking, often works well practice. However, \"good\" R-hat neither necessary sufficient condition MCMC convergence, substitute checking imputation quality convergence achieved.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/future_mice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallelize `mice::mice()`  Using {future} — future_mice","text":"","code":"future_mice(   data,   m = 5L,   method = NULL,   predictorMatrix = NULL,   ignore = NULL,   where = NULL,   blocks = NULL,   visitSequence = NULL,   formulas = NULL,   blots = NULL,   post = NULL,   defaultMethod = c(\"pmm\", \"logreg\", \"polyreg\", \"polr\"),   maxit = 100L,   minit = min(5L, maxit),   quiet = FALSE,   seed = NA,   data.init = NULL,   chunk_size = 1L,   rhat_max = 1.05,   progressor = NULL,   ... )"},{"path":"https://jesse-smith.github.io/futuremice/reference/future_mice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallelize `mice::mice()`  Using {future} — future_mice","text":"data data frame matrix containing incomplete data.  Missing values coded NA. m Number multiple imputations. default m=5. method Can either single string, vector strings length length(blocks), specifying imputation method used column data. specified single string, method used blocks. default imputation method (argument specified) depends measurement level target column, regulated defaultMethod argument. Columns need imputed empty method \"\". See details. predictorMatrix numeric matrix length(blocks) rows ncol(data) columns, containing 0/1 data specifying set predictors used target column. row corresponds variable block, .e., set variables imputed. value 1 means column variable used predictor target block (rows). default, predictorMatrix square matrix ncol(data) rows columns 1's, except diagonal. Note: two-level imputation models (\"2l\" names) codes (e.g, 2 -2) also allowed. ignore logical vector nrow(data) elements indicating rows ignored creating imputation model. default NULL includes rows observed value variable imputed. Rows ignore set TRUE influence parameters imputation model, still imputed. may use ignore argument split data training set (imputation model built) test set (influence imputation model estimates). Note: Multivariate imputation methods, like mice.impute.jomoImpute() mice.impute.panImpute(), honour ignore argument. data frame matrix logicals dimensions data indicating data imputations created. default, = .na(data), specifies missing data imputed. argument may used overimpute observed data, skip imputations selected missing values. blocks List vectors variable names per block. List elements may named identify blocks. Variables within block imputed multivariate imputation method (see method argument). default variable placed block, effectively fully conditional specification (FCS) univariate models (variable--variable imputation). variables whose names appear blocks imputed. relevant columns matrix set FALSE variables block members. variable may appear multiple blocks. case, effectively re-imputed time visited. visitSequence vector block names arbitrary length, specifying sequence blocks imputed one iteration Gibbs sampler. block collection variables. variables members block imputed block visited. variable member multiple blocks re-imputed within iteration. default visitSequence = \"roman\" visits blocks (left right) order appear blocks. One may also use one following keywords: \"arabic\" (right left), \"monotone\" (ordered low high proportion missing data) \"revmonotone\" (reverse monotone). Special case: specify visitSequence = \"monotone\" maxit = 1, procedure edit predictorMatrix conform monotone pattern. Realize convergence one iteration guaranteed missing data pattern actually monotone. procedure check . formulas named list formula's, expressions can converted formula's .formula. List elements correspond blocks. block list element applies identified name, list names must correspond block names. formulas argument alternative predictorMatrix argument allows flexibility specifying imputation models, e.g., specifying interaction terms. blots named list alist's can used pass arguments lower level imputation function. entries element blots[[blockname]] passed function called block blockname. post vector strings length ncol(data) specifying expressions strings. string parsed executed within sampler() function post-process imputed values iterations. default vector empty strings, indicating post-processing. Multivariate (block) imputation methods ignore post parameter. defaultMethod vector length 4 containing default imputation methods 1) numeric data, 2) factor data 2 levels, 3) factor data > 2 unordered levels, 4) factor data > 2 ordered levels. default, method uses pmm, predictive mean matching (numeric data) logreg, logistic regression imputation (binary data, factor 2 levels) polyreg, polytomous regression imputation unordered categorical data (factor > 2 levels) polr, proportional odds model (ordered, > 2 levels). maxit scalar giving maximum number iterations. future_mice() use less maxit iterations convergence criteria met; , default maxit = 50, much larger {mice} default maxit = 5 large enough \"just work\" many situations without potentially running days end convergence achieved. minit minimum number iterations run. also number iterations used assess convergence. Convergence defined (tail(rhat, minit) < rhat_max). quiet convergence messages warning suppressed? seed Seed random number generation; either scalar integer, NA, NULL. seed used directly mice::mice(); instead, used generate separate RNG streams future using parallel-safe L'Ecuyer-CMRG algorithm. data.init data frame size type data, without missing data, used initialize imputations start iterative process.  default NULL implies starting imputation created simple random draw data. Note specification data.init start m Gibbs sampling streams imputation. chunk_size average number chains per future. Differs usual {future} parameter multiple chains (\"chunks\") evaluated single call mice::mice() integer 1 < <= chunk_size m %% == 0. rhat_max R-hat threshold used assess convergence. Convergence defined (tail(rhat, minit) < rhat_max). progressor optional progressor function signal progress updates. supplied, responsible ensuring number steps progressor consistent number iterations performed future_mice(). ... Arguments passed mice::mice printFlag TRUE, mice print history console. Use print=FALSE silent computation.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/future_mice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallelize `mice::mice()`  Using {future} — future_mice","text":"Returns S3 object class mids (multiply imputed data set)","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/future_mice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parallelize `mice::mice()`  Using {future} — future_mice","text":"MICE method creating multiple imputations (replacement values) multivariate missing data. method based Fully Conditional Specification (FCS), incomplete varaible imputed separate model. MICE algorithm can impute mixes continuous, binary, unordered categorical ordered categorical data. addition, MICE can impute continuous two-level data maintain consistency imputations means passive imputation post-processing. Many diagnostic plots implemented inspect quality imputations. See mice::mice() function vignettes {mice} package website details. future_mice() mimics mice::mice() interface closely possible; however, shared parameters different defaults {mice} equivalents. Notably, default maxit much larger {mice}; maxit upper bound future_mice(), rather exact number iterations, mice(). default 100 enough iterations problems; need 100 iterations convergence, may want check imputation model circularity stability issues. Additionally, future_mice() provides NULL defaults unset arguments; best practice R. , passing NULL argument without explicit default passing argument, differs behavior mice() instances. Finally, output attributes identical equivalents mice(). particular, call attribute contains call future_mice(), rather call mice(). lastSeedValue equivalent, function identically subsequent calls mice.mids() future_mids().","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/future_mice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallelize `mice::mice()`  Using {future} — future_mice","text":"","code":"# Run imputations in parallel (just two to avoid hogging resources) # Picking a number of workers that divides `m` evenly can help performance future::plan(\"multisession\", workers = pmin(2L, future::availableCores()))  # Use just like `mice::mice()` - examples from {mice} documentation mids <- future_mice(mice::nhanes, m = 2L, maxit = 1L) #> Warning: Sampling did not converge in 1 iteration #> R-hat: NA  if (FALSE) { # Run until convergence (`maxit = 100L` by default) mids <- future_mice(mice::nhanes, m = 2L) }  mids #> Class: mids #> Number of multiple imputations:  2  #> Imputation methods: #>   age   bmi   hyp   chl  #>    \"\" \"pmm\" \"pmm\" \"pmm\"  #> PredictorMatrix: #>     age bmi hyp chl #> age   0   1   1   1 #> bmi   1   0   1   1 #> hyp   1   1   0   1 #> chl   1   1   1   0  # List the actual imputations for BMI mids$imp$bmi #>       1    2 #> 1  30.1 35.3 #> 3  28.7 35.3 #> 4  21.7 21.7 #> 6  27.4 21.7 #> 10 28.7 27.4 #> 11 27.5 29.6 #> 12 29.6 22.7 #> 16 22.0 27.2 #> 21 28.7 33.2  # First completed data matrix mice::complete(mids) #>    age  bmi hyp chl #> 1    1 30.1   1 187 #> 2    2 22.7   1 187 #> 3    1 28.7   1 187 #> 4    3 21.7   2 199 #> 5    1 20.4   1 113 #> 6    3 27.4   1 184 #> 7    1 22.5   1 118 #> 8    1 30.1   1 187 #> 9    2 22.0   1 238 #> 10   2 28.7   1 186 #> 11   1 27.5   1 187 #> 12   2 29.6   1 206 #> 13   3 21.7   1 206 #> 14   2 28.7   2 204 #> 15   1 29.6   1 187 #> 16   1 22.0   1 118 #> 17   3 27.2   2 284 #> 18   2 26.3   2 199 #> 19   1 35.3   1 218 #> 20   3 25.5   2 204 #> 21   1 28.7   1 187 #> 22   1 33.2   1 229 #> 23   1 27.5   1 131 #> 24   3 24.9   1 199 #> 25   2 27.4   1 186  # Reset future plan future::plan(\"sequential\")"},{"path":"https://jesse-smith.github.io/futuremice/reference/future_mids.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallelize `mice::mice.mids()`  Using {future} — future_mids","title":"Parallelize `mice::mice.mids()`  Using {future} — future_mids","text":"future_mids() analogous mice::mice.mids(), parallelizes chains using {furrr} package stops early convergence detected using R-hat statistic (see future_mice() documentation details).","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/future_mids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallelize `mice::mice.mids()`  Using {future} — future_mids","text":"","code":"future_mids(   obj,   newdata = NULL,   maxit = 100L,   minit = min(5L, maxit),   quiet = FALSE,   chunk_size = 1L,   rhat_max = 1.05,   progressor = NULL,   update_call = TRUE,   ... )"},{"path":"https://jesse-smith.github.io/futuremice/reference/future_mids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallelize `mice::mice.mids()`  Using {future} — future_mids","text":"obj mids object, created mice::mice(), future_mice(), future_mids() (function) newdata optional data.frame multiple imputations generated according model obj. maxit number additional Gibbs sampling iterations. minit minimum number iterations run. also number iterations used assess convergence. Convergence defined (tail(rhat, minit) < rhat_max). quiet convergence messages warning suppressed? chunk_size average number chains per future. Differs usual {future} parameter multiple chains (\"chunks\") evaluated single call mice::mice() integer 1 < <= chunk_size m %% == 0. rhat_max R-hat threshold used assess convergence. Convergence defined (tail(rhat, minit) < rhat_max). progressor optional progressor function signal progress updates. supplied, responsible ensuring number steps progressor consistent number iterations performed future_mice(). update_call mids$call set new future_mids() call left unchanged? ... Named arguments passed univariate imputation functions.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/future_mids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallelize `mice::mice.mids()`  Using {future} — future_mids","text":"Returns S3 object class mids (multiply imputed data set)","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/future_mids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallelize `mice::mice.mids()`  Using {future} — future_mids","text":"","code":"# Run in parallel (just two cores to avoid hogging resources) # Picking a number of workers that divides `m` evenly can help performance future::plan(\"multisession\", workers = pmin(2L, future::availableCores()))  # Run `mice::mice()` # `m` and `maxit` are small here to keep runtime short mids <- mice::mice(mice::nhanes, m = 2L, maxit = 1L) #>  #>  iter imp variable #>   1   1  bmi  hyp  chl #>   1   2  bmi  hyp  chl  # Run for additional iteration mids <- future_mids(mids, maxit = 1L) #> Warning: Sampling did not converge in 2 iterations #> R-hat: NA  if (FALSE) { # Run until convergence mids <- future_mids(mids, maxit = 100L) mids }  # Reset future plan future::plan(\"sequential\")"},{"path":"https://jesse-smith.github.io/futuremice/reference/futuremice-package.html","id":null,"dir":"Reference","previous_headings":"","what":"futuremice: A Future for MICE — futuremice-package","title":"futuremice: A Future for MICE — futuremice-package","text":"futuremice provides parallelized variants `mice::mice()` `mice::mice.mids()` support progress updates early stopping convergence.","code":""},{"path":[]},{"path":"https://jesse-smith.github.io/futuremice/reference/futuremice-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"futuremice: A Future for MICE — futuremice-package","text":"Maintainer: Jesse Smith jesse.smith@stjude.org","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/ibindlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine a List of mids Objects — ibindlist","title":"Combine a List of mids Objects — ibindlist","text":"Combines list mids objects single mids object. resulting number imputed data sets equal sum number imputed data sets list element.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/ibindlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine a List of mids Objects — ibindlist","text":"","code":"ibindlist(mids_list, call = NULL, seed = NULL, last_seed_value = NULL)"},{"path":"https://jesse-smith.github.io/futuremice/reference/ibindlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine a List of mids Objects — ibindlist","text":"mids_list List mids objects combine call optional call use call attribute resulting mids object. default uses call mids_list[[1]]$call. seed optional integer set seed attribute resulting mids object. last_seed_value optional .Random.seed value set lastSeedValue attribute resulting mids object","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/ibindlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine a List of mids Objects — ibindlist","text":"combined mids object","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/ibindlist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine a List of mids Objects — ibindlist","text":"call, seed, last_seed_value arguments primarily used future_mice() future_mids(); allow modification mids object match equivalent mice::mice() output exactly.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/ibindlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine a List of mids Objects — ibindlist","text":"","code":"# Create individual `mids` objects mids1 <- mice::mice(mice::nhanes, m = 1L, maxit = 1L, seed = 1L) #>  #>  iter imp variable #>   1   1  bmi  hyp  chl mids2 <- mice::mice(mice::nhanes, m = 2L, maxit = 1L, seed = 2L) #>  #>  iter imp variable #>   1   1  bmi  hyp  chl #>   1   2  bmi  hyp  chl mids3 <- mice::mice(mice::nhanes, m = 3L, maxit = 1L, seed = 3L) #>  #>  iter imp variable #>   1   1  bmi  hyp  chl #>   1   2  bmi  hyp  chl #>   1   3  bmi  hyp  chl  # Combine imputations mids6 <- ibindlist(list(mids1, mids2, mids3)) mids6 #> Class: mids #> Number of multiple imputations:  6  #> Imputation methods: #>   age   bmi   hyp   chl  #>    \"\" \"pmm\" \"pmm\" \"pmm\"  #> PredictorMatrix: #>     age bmi hyp chl #> age   0   1   1   1 #> bmi   1   0   1   1 #> hyp   1   1   0   1 #> chl   1   1   1   0"},{"path":"https://jesse-smith.github.io/futuremice/reference/isplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a mids Object into List of mids — isplit","title":"Split a mids Object into List of mids — isplit","text":"isplit() inverse ibindlist() converts single mids object list mids objects containing largest number chains possible distributing chains evenly among mids objects keeping number chains per object <= chunk_size. resulting number objects specified implicitly mids$m chunk_size.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/isplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a mids Object into List of mids — isplit","text":"","code":"isplit(mids, chunk_size = 1L)"},{"path":"https://jesse-smith.github.io/futuremice/reference/isplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a mids Object into List of mids — isplit","text":"mids mids object, created mice::mice() chunk_size number allocate smaller mids object resulting list. mids$m %% chunk_size != 0, smaller chunk_size used.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/isplit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a mids Object into List of mids — isplit","text":"list mids objects","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/isplit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a mids Object into List of mids — isplit","text":"","code":"# Create `mids` object mids <- mice::mice(mice::nhanes, m = 2L, maxit = 1L) #>  #>  iter imp variable #>   1   1  bmi  hyp  chl #>   1   2  bmi  hyp  chl  # Split into two - 1 imputation per object mids_list <- isplit(mids) mids_list #> [[1]] #> Class: mids #> Number of multiple imputations:  1  #> Imputation methods: #>   age   bmi   hyp   chl  #>    \"\" \"pmm\" \"pmm\" \"pmm\"  #> PredictorMatrix: #>     age bmi hyp chl #> age   0   1   1   1 #> bmi   1   0   1   1 #> hyp   1   1   0   1 #> chl   1   1   1   0 #>  #> [[2]] #> Class: mids #> Number of multiple imputations:  1  #> Imputation methods: #>   age   bmi   hyp   chl  #>    \"\" \"pmm\" \"pmm\" \"pmm\"  #> PredictorMatrix: #>     age bmi hyp chl #> age   0   1   1   1 #> bmi   1   0   1   1 #> hyp   1   1   0   1 #> chl   1   1   1   0 #>"},{"path":"https://jesse-smith.github.io/futuremice/reference/rhat_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick Max R-hat Calculation — rhat_max","title":"Quick Max R-hat Calculation — rhat_max","text":"Calculates largest R-hat statistic across variables chain statistics recent iterations","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/rhat_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick Max R-hat Calculation — rhat_max","text":"","code":"rhat_max(mids, n = 1L)"},{"path":"https://jesse-smith.github.io/futuremice/reference/rhat_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick Max R-hat Calculation — rhat_max","text":"mids mids object created mice::mice() n number recent iterations R-hat calculated. larger total number iterations, truncated.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/rhat_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick Max R-hat Calculation — rhat_max","text":"scalar double containing maximum R-hat statistic","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/rhat_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick Max R-hat Calculation — rhat_max","text":"","code":"# Create `mids` object mids <- mice::mice(mice::nhanes) #>  #>  iter imp variable #>   1   1  bmi  hyp  chl #>   1   2  bmi  hyp  chl #>   1   3  bmi  hyp  chl #>   1   4  bmi  hyp  chl #>   1   5  bmi  hyp  chl #>   2   1  bmi  hyp  chl #>   2   2  bmi  hyp  chl #>   2   3  bmi  hyp  chl #>   2   4  bmi  hyp  chl #>   2   5  bmi  hyp  chl #>   3   1  bmi  hyp  chl #>   3   2  bmi  hyp  chl #>   3   3  bmi  hyp  chl #>   3   4  bmi  hyp  chl #>   3   5  bmi  hyp  chl #>   4   1  bmi  hyp  chl #>   4   2  bmi  hyp  chl #>   4   3  bmi  hyp  chl #>   4   4  bmi  hyp  chl #>   4   5  bmi  hyp  chl #>   5   1  bmi  hyp  chl #>   5   2  bmi  hyp  chl #>   5   3  bmi  hyp  chl #>   5   4  bmi  hyp  chl #>   5   5  bmi  hyp  chl  # Get max R-hat for most recent 2 iterations rhat <- rhat_max(mids, n = 2L) rhat #> [1] 2.497963 1.902514"},{"path":"https://jesse-smith.github.io/futuremice/reference/rstan_rhat.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-Implement rstan::Rhat() — rstan_rhat","title":"Re-Implement rstan::Rhat() — rstan_rhat","text":"Internal implementation rstan::Rhat() avoid unnecessary dependency.","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/rstan_rhat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-Implement rstan::Rhat() — rstan_rhat","text":"","code":"rstan_rhat(params)  rstan_rhat_(params)  rstan_split_chains(params)  rstan_z_scale(x)  rstan_is_constant(x, tol = .Machine$double.eps)"},{"path":"https://jesse-smith.github.io/futuremice/reference/rstan_rhat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-Implement rstan::Rhat() — rstan_rhat","text":"params 2D matrix array one row per iteration one column per chain. cells realized draws particular parameter function parameters. x Vector, matrix, array scale","code":""},{"path":"https://jesse-smith.github.io/futuremice/reference/rstan_rhat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-Implement rstan::Rhat() — rstan_rhat","text":"rstan_rhat() returns scalar double max bulk tail (folded) R-hat statistic params. rstan_rhat_() returns scalar double R-hat. rstan_split_chains() returns array column split two columns (top bottom half). rstan_z_scale() returns scaled vector/matrix/array.","code":""},{"path":"https://jesse-smith.github.io/futuremice/news/index.html","id":"futuremice-0009004","dir":"Changelog","previous_headings":"","what":"futuremice 0.0.0.9004","title":"futuremice 0.0.0.9004","text":"Fix progress bar displaying Fix issues lazy argument evaluation parallelization","code":""},{"path":"https://jesse-smith.github.io/futuremice/news/index.html","id":"futuremice-0009003","dir":"Changelog","previous_headings":"","what":"futuremice 0.0.0.9003","title":"futuremice 0.0.0.9003","text":"Use minit control minimum iterations future_mice() Add comprehensive tests small functions Add minimal test future_mice()","code":""},{"path":"https://jesse-smith.github.io/futuremice/news/index.html","id":"futuremice-0009002","dir":"Changelog","previous_headings":"","what":"futuremice 0.0.0.9002","title":"futuremice 0.0.0.9002","text":"Change default maxit future_mice() 50 100 Change default maxit future_mids() 1 100","code":""},{"path":"https://jesse-smith.github.io/futuremice/news/index.html","id":"futuremice-0009000","dir":"Changelog","previous_headings":"","what":"futuremice 0.0.0.9000","title":"futuremice 0.0.0.9000","text":"Add NEWS.md file track changes package. Add compare_mids() compare two mids objects Add future_mids() add imputation iterations parallel Add isplit() split imputations multiple mids objects Add ibindlist() bind imputations multiple mids objects Add future_mice() run multiple imputations parallel Add rhat_max() assess convergence","code":""}]
