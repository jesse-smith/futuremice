% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fm_assert.R
\name{fm_assert}
\alias{fm_assert}
\alias{fm_assert_mids}
\alias{fm_assert_progressor}
\alias{fm_assert_bool}
\alias{fm_assert_count}
\alias{fm_assert_seed}
\alias{fm_assert_num}
\alias{fm_assert_vec_int}
\alias{fm_assert_vec_num}
\title{Make Assertions on Data Types and Arguments}
\usage{
fm_assert_mids(x, arg_nm = rlang::caller_arg(x))

fm_assert_progressor(x, arg_nm = rlang::caller_arg(x))

fm_assert_bool(x, arg_nm = rlang::caller_arg(x))

fm_assert_count(x, zero_ok = TRUE, arg_nm = rlang::caller_arg(x))

fm_assert_seed(x, arg_nm = rlang::caller_arg(x))

fm_assert_num(x, arg_nm = rlang::caller_arg(x))

fm_assert_vec_int(x, arg_nm = rlang::caller_arg(x))

fm_assert_vec_num(x, na_ok = FALSE, arg_nm = rlang::caller_arg(x))
}
\arguments{
\item{x}{An object to check}

\item{arg_nm}{The name of the object to check; can usually be inferred from
the caller environment automatically}

\item{zero_ok}{Should zero be included in the counting numbers or raise an
error?}

\item{na_ok}{Should \code{NA}, \code{NaN}, or \code{Inf} values be considered valid?}
}
\value{
If successful, \code{x}, invisibly; errors if unsuccessful. \code{x} may be
converted to strictly match the required data type.
}
\description{
\code{fm_assert_mids()} checks for a \code{mids} object
\code{fm_assert_progressor()} checks for a \code{progressor} function or \code{NULL}
\code{fm_assert_bool()} checks for a non-missing, scalar \code{logical}
\code{fm_assert_count()} checks for a non-missing, finite, scalar integer-ish
value >= 0 and converts its input to \code{integer}
\code{fm_assert_seed()} checks for a finite, scalar integer-ish value, \code{NA},
or \code{NULL}, and converts non-\code{NULL} input to \code{integer}
\code{fm_assert_num()} checks for a non-missing, scalar, finite \code{numeric} and
converts its input to \code{double}
\code{fm_assert_vec_int()} checks for non-missing, finite integer-ish values and
converts its input to \code{integer}
\code{fm_assert_vec_num()} checks for non-missnig, finite values and converts its
input to \code{double}
}
\keyword{internal}
